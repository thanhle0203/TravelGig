package com.thanhle.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.thanhle.domain.Building;
import com.thanhle.domain.Room;
import com.thanhle.repository.BuildingRepository;
import com.thanhle.repository.RoomRepository;

@Service
public class IBuildingService implements BuildingService {

	@Autowired
	private BuildingRepository buildingRepository;
	
	@Autowired
	private RoomRepository roomRepository;

	@Override
	public Building saveBuilding(Building building) {
		// Check if building already exists
		Optional<Building> existingBuilding = Optional.of(buildingRepository.findByBuName(building.getBuName()));
		if (existingBuilding.isPresent()) {
			// Update existing building with new room size and room type
			Building updatedBuilding = existingBuilding.get();
			for (Room room : building.getRoomList()) {
				if (room.getRoomType().equals(updatedBuilding.getRoomList().iterator().next().getRoomType())
						&& !room.getRoomSize().equals(updatedBuilding.getRoomList().iterator().next().getRoomSize())) {
					updatedBuilding.getRoomList().iterator().next().setRoomSize(room.getRoomSize());
				} else {
					updatedBuilding.getRoomList().add(room);
				}
			}
			return buildingRepository.save(updatedBuilding);
		} else {
			// Save new building and rooms
			for (Room room : building.getRoomList()) {
				room.setBuilding(building);
				roomRepository.save(room);
			}
			return buildingRepository.save(building);
		}
	}

	@Override
	public Building getBuildingByName(String buName) {
		return buildingRepository.findByBuName(buName);
	}

	@Override
	public List<Building> getAllBuildings() {
		return buildingRepository.findAll();
	}
}
